name: assignment3
on:
  push:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: log of start workflow time
        run: echo -e "$(date -Iminutes)\nOmri Weinstein, Gal Trodel\n" > log.txt
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: ./booksServer
          tags: books:latest, ${{ secrets.USERNAME }}/books:latest
          outputs: type=docker,dest=/tmp/image.tar
      - name: Check build status and log result
        run: |
          if [ -f /tmp/image.tar ]; then
            echo -e "image successfully built\n" >> log.txt
          else
            echo -e "image not able to be built\n" >> log.txt
          fi
      - name: Upload log file
        uses: actions/upload-artifact@v3
        with:
          name: log
          path: log.txt
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: books
          path: /tmp/image.tar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      #    1. download image and run it in a container
      - name: Download artifact
        uses: actions/download-artifact@v3 # downloads all artifacts
      - name: Load Docker images from previous workflows
        run: docker load --input books/image.tar
      - name: check books image is loaded
        run: docker image ls
      - name: create a docker network
        run: docker network create books-net
      - name: run mongodb in container
        run: docker run -d -p 27017:27017 --network books-net --name mongodb mongo
      - name: run image in container
        run: docker run -e MONGO_URL="mongodb://mongodb:27017/BooksDB" --network books-net -p5001:8000 books &
      - name: Check container is running
        run: |
          if docker ps --filter "name=books-container" --filter "status=running" | grep books-container; then
            echo -e "Container up and running\n" >> log.txt
          else
            echo -e "Container failed to run\n" >> log.txt
          fi
      #     2. set up python and pytest environment
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest # not using yet lint checker like ruff
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      #      3. run pytest tests and check results
      - name: Test with pytest # additionally use ruff or other lint checkers
        run: |
          cd tests
          pytest -v assn3_tests.py > assn3_test_results.txt
        continue-on-error: true
      - name: Check test results and log
        run: |
          if [ $? -eq 0 ]; then
            echo -e "tests succeeded\n" >> log.txt
          else
            echo -e "tests failed\n" >> log.txt
          fi
      - name: upload test results
        uses: actions/upload-artifact@v3
        with:
          name: assn3_test_results
          path: tests/assn3_test_results.txt
      - name: Upload log file
        uses: actions/upload-artifact@v3
        with:
          name: log
          path: log.txt

  query:
    needs: build
    runs-on: ubuntu-latest
    steps:
      #    1. download image and run it in a container
      - name: Download artifact
        uses: actions/download-artifact@v3 # downloads all artifacts
      - name: Load Docker images from previous workflows
        run: docker load --input books/image.tar
      - name: check books image is loaded
        run: docker image ls
      - name: create a docker network
        run: docker network create books-net
      - name: run mongodb in container
        run: docker run -d -p 27017:27017 --network books-net --name mongodb mongo
      - name: run image in container
        run: docker run -e MONGO_URL="mongodb://mongodb:27017/BooksDB" --network books-net -p5001:8000 books &
      #     2. set up python and pytest environment
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
