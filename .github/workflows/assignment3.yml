name: assignment3
on:
  push:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: log of start workflow time
        run: echo -e "$(date -Iminutes)\nOmri Weinstein, Gal Trodel" > /tmp/log.txt
      - name: Print log file contents
        run: cat /tmp/log.txt
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: ./booksServer
          tags: books:latest, ${{ secrets.USERNAME }}/books:latest
          outputs: type=docker,dest=/tmp/image.tar
      - name: Handle build failure
        if: failure()
        run: |
          echo -e "image not able to be built" >> /tmp/log.txt
      - name: Handle build success
        if: success()
        run: |
          echo -e "iimage successfully built" >> /tmp/log.txt
      - name: Print log file contents
        run: cat /tmp/log.txt
      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: /tmp/log.txt
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: books
          path: /tmp/image.tar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      #    1. download image and run it in a container
      - name: Download books artifact
        uses: actions/download-artifact@v4
        with:
          name: books
          path: /tmp
      - name: Load Docker images from previous workflows
        run: docker load --input /tmp/image.tar
      - name: Download log artifact
        uses: actions/download-artifact@v4
        with:
          name: log
          path: /tmp
      - name: Print log file contents
        run: cat /tmp/log.txt
      - name: check books image is loaded
        run: docker image ls
      - name: Run Docker Compose
        run: docker-compose up -d &
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          sleep 10  # Adjust the sleep time as needed
      - name: Check container is running
        run: |
          docker container ls
          docker ps --filter "ancestor=books:latest" --filter "status=running" -q
          docker ps --filter "ancestor=mongo:latest" --filter "status=running" -q
      - name: Check container is running and log
        run: |
          books_running=$(docker ps --filter "ancestor=books:latest" --filter "status=running" -q)
          mongo_running=$(docker ps --filter "ancestor=mongo:latest" --filter "status=running" -q)
          if [ -n "$books_running" ] && [ -n "$mongo_running" ]; then
            echo -e "Container up and running" >> /tmp/log.txt
          else
            echo -e "Container failed to run" >> /tmp/log.txt
          fi
      - name: Print log file contents
        run: cat /tmp/log.txt
      #     2. set up python and pytest environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest # not using yet lint checker like ruff
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      #      3. run pytest tests and check results
      - name: Test with pytest # additionally use ruff or other lint checkers
        run: |
          cd tests
          pytest -v assn3_tests.py > assn3_test_results.txt
        continue-on-error: true
      - name: Check test results and log
        run: |
          if [ $? -eq 0 ]; then
            echo -e "tests succeeded" >> /tmp/log.txt
          else
            echo -e "tests failed" >> /tmp/log.txt
          fi
      - name: Print log file contents
        run: cat /tmp/log.txt
      - name: upload test results
        uses: actions/upload-artifact@v4
        with:
          name: assn3_test_results
          path: tests/assn3_test_results.txt
      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: /tmp/log.txt
          overwrite: true
      - name: Shut down Docker Compose
        run: docker-compose down

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      #    1. download image and run it in a container
      - name: Download books artifact
        uses: actions/download-artifact@v4
        with:
          name: books
          path: /tmp
      - name: Load Docker images from previous workflows
        run: docker load --input /tmp/image.tar
      - name: check books image is loaded
        run: docker image ls
      - name: Run Docker Compose
        run: docker-compose up -d &
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          sleep 10  # Adjust the sleep time as needed
      - name: Check container is running
        run: |
          docker container ls
          docker ps --filter "ancestor=books:latest" --filter "status=running" -q
          docker ps --filter "ancestor=mongo:latest" --filter "status=running" -q
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      - name: Run request with python # additionally use ruff or other lint checkers
        run: |
          cd tests
          python run_queries.py
      - name: upload response results
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: tests/response.txt
      - name: Shut down Docker Compose
        run: docker-compose down
